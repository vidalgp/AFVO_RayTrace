
    Vup, Vmid = velocities[:-1]
    gamma = np.arctan(wedgeSlope) #radians
    try:
        critic_downw= np.degrees(np.arcsin(Vup/Vmid))
    except:
        critic_downw = 0
        print('Warning: No critical angle found for incident ray')
    try:
        critic_upw = np.degrees(np.arcsin(Vmid/Vup))
    except:
        critic_upw = 0 
        print('Warning: No critical angle found for upgoing reflected ray')

    angles_in = np.zeros(0, dtype='float')
    angles_upper = np.zeros(0, dtype='float')
    angles_lower = np.zeros(0, dtype='float')
    
    if critic_downw:
        maXd = min(critic_downw, maxAng)
    else:
        maXd = maxAng

    if critic_upw:
        maXu = min(critic_upw, np.degrees(psi(np.radians(maxAng), gamma, [Vup, Vmid])))
    else:
        maXu = np.degrees(psi(np.radians(maxAng), gamma, [Vup, Vmid]))
    
    i = 0
